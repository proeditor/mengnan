// Code generated by goctl. DO NOT EDIT!
// Source: college.proto

package college

import (
	"context"

	"rpc/college/rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CollegeAddRequest     = rpc.CollegeAddRequest
	CollegeAddResponse    = rpc.CollegeAddResponse
	CollegeUpdateRequest  = rpc.CollegeUpdateRequest
	CollegeUpdateResponse = rpc.CollegeUpdateResponse

	College interface {
		AddCollege(ctx context.Context, in *CollegeAddRequest, opts ...grpc.CallOption) (*CollegeAddResponse, error)
		UpdateCollege(ctx context.Context, in *CollegeUpdateRequest, opts ...grpc.CallOption) (*CollegeUpdateResponse, error)
	}

	defaultCollege struct {
		cli zrpc.Client
	}
)

func NewCollege(cli zrpc.Client) College {
	return &defaultCollege{
		cli: cli,
	}
}

func (m *defaultCollege) AddCollege(ctx context.Context, in *CollegeAddRequest, opts ...grpc.CallOption) (*CollegeAddResponse, error) {
	client := rpc.NewCollegeClient(m.cli.Conn())
	return client.AddCollege(ctx, in, opts...)
}

func (m *defaultCollege) UpdateCollege(ctx context.Context, in *CollegeUpdateRequest, opts ...grpc.CallOption) (*CollegeUpdateResponse, error) {
	client := rpc.NewCollegeClient(m.cli.Conn())
	return client.UpdateCollege(ctx, in, opts...)
}
